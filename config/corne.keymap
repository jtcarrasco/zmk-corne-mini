#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3

//testing mouse movement and scroll binds...

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos { compatible = "zmk,combos"; };

    //

    macros {
        SC_V: clipboard {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp V &kp RIGHT_GUI>;

            label = "CLIPBOARD";
        };

        SC_COPY: sc_cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp C>;

            label = "SC_CUT";
        };

        SC_CUT: SC_CUT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp X>;

            label = "SC_CUT";
        };

        SC_PSTE: SC_PSTE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp V>;

            label = "SC_PSTE";
        };

        SC_SAVE: SC_SAVE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp S>;

            label = "SC_SAVE";
        };

        SC_RFH: SC_RFH {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp R>;

            label = "SC_RFH";
        };

        SC_AC: SC_AC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp N0>;

            label = "SC_AC";
        };

        SC_UNDO: SC_UNDO {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp Z>;

            label = "SC_UNDO";
        };

        SC_OUT: SC_OUT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp MINUS>;

            label = "SC_OUT";
        };

        SC_IN: SC_IN {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LEFT_CONTROL &kp PLUS>;

            label = "SC_IN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&none  &kp Q             &kp W  &kp E         &kp R  &kp T         &kp Y      &kp U  &kp I                &kp O    &kp P          &none
&none  &kp A             &kp S  &kp D         &kp F  &kp G         &kp H      &kp J  &kp K                &kp L    &kp SEMICOLON  &none
&none  &mt LEFT_SHIFT Z  &kp X  &kp C         &kp V  &kp B         &kp N      &kp M  &kp COMMA            &kp DOT  &kp FSLH       &none
                                &kp LEFT_ALT  &mo 1  &kp ESCAPE    &kp SPACE  &mo 2  &mt RIGHT_GUI ENTER
            >;
        };

        NUM {
            display-name = "Num";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&none  &none   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none            &kp DELETE  &SC_AC    &SC_OUT       &SC_IN     &kp BACKSPACE    &none
&none  &none   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PAGE_UP      &kp LEFT    &kp DOWN  &kp UP_ARROW  &kp RIGHT  &SC_RFH          &none
&none  &trans  &kp N7        &kp N8        &kp N9        &kp PAGE_DOWN    &SC_UNDO    &SC_CUT   &SC_COPY      &SC_PSTE   &kp RIGHT_SHIFT  &none
                             &kp N0        &trans        &SC_V            &kp TAB     &trans    &trans
            >;
        };

        FUN {
            display-name = "Fun";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &trans        &kp F1  &kp F2   &kp F3  &kp GRAVE    &trans          &kp MINUS             &kp EQUAL              &kp UNDER          &kp PLUS          &none
&none  &kp CAPSLOCK  &kp F4  &kp F5   &kp F6  &kp TILDE    &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp LEFT_BRACKET       &kp RIGHT_BRACKET  &kp SINGLE_QUOTE  &none
&none  &trans        &kp F7  &kp F8   &kp F9  &trans       &kp PIPE        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH      &kp RIGHT_SHIFT   &none
                             &kp F10  &trans  &trans       &trans          &trans                &SC_SAVE
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        l3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
